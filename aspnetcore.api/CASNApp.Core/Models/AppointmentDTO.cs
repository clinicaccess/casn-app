/*
 * CASN API
 *
 * This is a test CASN API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: katie@clinicaccess.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace CASNApp.Core.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AppointmentDTO : IEquatable<AppointmentDTO>
    {
        /// <summary>
        /// Gets or Sets Caller
        /// </summary>
        [DataMember(Name = "caller")]
        public Caller Caller { get; set; }

        /// <summary>
        /// Gets or Sets Appointment
        /// </summary>
        [DataMember(Name="appointment")]
        public Appointment Appointment { get; set; }

        /// <summary>
        /// Gets or Sets DriveTo
        /// </summary>
        [DataMember(Name="driveTo")]
        public Drive DriveTo { get; set; }

        /// <summary>
        /// Gets or Sets DriveFrom
        /// </summary>
        [DataMember(Name="driveFrom")]
        public Drive DriveFrom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppointmentDTO {\n");
            sb.Append("  Appointment: ").Append(Appointment).Append("\n");
            sb.Append("  DriveTo: ").Append(DriveTo).Append("\n");
            sb.Append("  DriveFrom: ").Append(DriveFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AppointmentDTO)obj);
        }

        /// <summary>
        /// Returns true if AppointmentDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of AppointmentDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppointmentDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Caller == other.Caller ||
                    Caller != null &&
                    Caller.Equals(other.Caller)
                ) &&
                (
                    Appointment == other.Appointment ||
                    Appointment != null &&
                    Appointment.Equals(other.Appointment)
                ) && 
                (
                    DriveTo == other.DriveTo ||
                    DriveTo != null &&
                    DriveTo.Equals(other.DriveTo)
                ) && 
                (
                    DriveFrom == other.DriveFrom ||
                    DriveFrom != null &&
                    DriveFrom.Equals(other.DriveFrom)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Caller != null)
                    hashCode = hashCode * 59 + Caller.GetHashCode();
                    if (Appointment != null)
                    hashCode = hashCode * 59 + Appointment.GetHashCode();
                    if (DriveTo != null)
                    hashCode = hashCode * 59 + DriveTo.GetHashCode();
                    if (DriveFrom != null)
                    hashCode = hashCode * 59 + DriveFrom.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AppointmentDTO left, AppointmentDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AppointmentDTO left, AppointmentDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
