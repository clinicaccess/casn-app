/*
 * CASN API
 *
 * This is a test CASN API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: katie@clinicaccess.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace CASNApp.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Patient : IEquatable<Patient>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; internal set; }

        /// <summary>
        /// Gets or Sets CiviContactId
        /// </summary>
        [DataMember(Name="civiContactId")]
        public long? CiviContactId { get; private set; }

        /// <summary>
        /// Gets or Sets PatientIdentifier
        /// </summary>
        [Required]
        [DataMember(Name="patientIdentifier")]
        public string PatientIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [Required]
        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [Required]
        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [Required]
        [DataMember(Name="phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets IsMinor
        /// </summary>
        [Required]
        [DataMember(Name="isMinor")]
        public bool? IsMinor { get; set; }

        /// <summary>
        /// Gets or Sets PreferredLanguage
        /// </summary>
        [Required]
        [DataMember(Name="preferredLanguage")]
        public string PreferredLanguage { get; set; }

        /// <summary>
        /// Gets or Sets PreferredContactMethod
        /// </summary>
        [Required]
        [DataMember(Name="preferredContactMethod")]
        public int? PreferredContactMethod { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created")]
        public DateTime? Created { get; internal set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated")]
        public DateTime? Updated { get; internal set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Patient {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CiviContactId: ").Append(CiviContactId).Append("\n");
            sb.Append("  PatientIdentifier: ").Append(PatientIdentifier).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  IsMinor: ").Append(IsMinor).Append("\n");
            sb.Append("  PreferredLanguage: ").Append(PreferredLanguage).Append("\n");
            sb.Append("  PreferredContactMethod: ").Append(PreferredContactMethod).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Patient)obj);
        }

        /// <summary>
        /// Returns true if Patient instances are equal
        /// </summary>
        /// <param name="other">Instance of Patient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Patient other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    CiviContactId == other.CiviContactId ||
                    CiviContactId != null &&
                    CiviContactId.Equals(other.CiviContactId)
                ) && 
                (
                    PatientIdentifier == other.PatientIdentifier ||
                    PatientIdentifier != null &&
                    PatientIdentifier.Equals(other.PatientIdentifier)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    IsMinor == other.IsMinor ||
                    IsMinor != null &&
                    IsMinor.Equals(other.IsMinor)
                ) && 
                (
                    PreferredLanguage == other.PreferredLanguage ||
                    PreferredLanguage != null &&
                    PreferredLanguage.Equals(other.PreferredLanguage)
                ) && 
                (
                    PreferredContactMethod == other.PreferredContactMethod ||
                    PreferredContactMethod != null &&
                    PreferredContactMethod.Equals(other.PreferredContactMethod)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CiviContactId != null)
                    hashCode = hashCode * 59 + CiviContactId.GetHashCode();
                    if (PatientIdentifier != null)
                    hashCode = hashCode * 59 + PatientIdentifier.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (IsMinor != null)
                    hashCode = hashCode * 59 + IsMinor.GetHashCode();
                    if (PreferredLanguage != null)
                    hashCode = hashCode * 59 + PreferredLanguage.GetHashCode();
                    if (PreferredContactMethod != null)
                    hashCode = hashCode * 59 + PreferredContactMethod.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Patient left, Patient right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Patient left, Patient right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
