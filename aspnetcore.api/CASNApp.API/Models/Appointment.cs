/*
 * CASN API
 *
 * This is a test CASN API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: katie@clinicaccess.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace CASNApp.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Appointment : IEquatable<Appointment>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; internal set; }

        /// <summary>
        /// Gets or Sets DispatcherId
        /// </summary>
        [Required]
        [DataMember(Name="dispatcherId")]
        public long? DispatcherId { get; set; }

        /// <summary>
        /// Gets or Sets CallerId
        /// </summary>
        [Required]
        [DataMember(Name="callerId")]
        public long? CallerId { get; set; }

        /// <summary>
        /// Gets or Sets CallerIdentifier
        /// </summary>
        [DataMember(Name= "callerIdentifier")]
        public string CallerIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CallerNote
        /// </summary>
        [DataMember(Name= "callerNote")]
        public string CallerNote { get; set; }

        /// <summary>
        /// Gets or Sets ClinicId
        /// </summary>
        [Required]
        [DataMember(Name="clinicId")]
        public long? ClinicId { get; set; }

        /// <summary>
        /// Gets or Sets PickupLocationVague
        /// </summary>
        [DataMember(Name="pickupLocationVague")]
        public string PickupLocationVague { get; set; }

        /// <summary>
        /// Gets or Sets PickupVagueLatitude
        /// </summary>
        [DataMember(Name = "pickupVagueLatitude")]
        public decimal? PickupVagueLatitude { get; set; }

        /// <summary>
        /// Gets or Sets PickupVagueLongitude
        /// </summary>
        [DataMember(Name = "pickupVagueLongitude")]
        public decimal? PickupVagueLongitude { get; set; }

        /// <summary>
        /// Gets or Sets DropoffLocationVague
        /// </summary>
        [DataMember(Name="dropoffLocationVague")]
        public string DropoffLocationVague { get; set; }

        /// <summary>
        /// Gets or Sets DropoffVagueLatitude
        /// </summary>
        [DataMember(Name = "dropoffVagueLatitude")]
        public decimal? DropoffVagueLatitude { get; set; }

        /// <summary>
        /// Gets or Sets DropoffVagueLongitude
        /// </summary>
        [DataMember(Name = "dropoffVagueLongitude")]
        public decimal? DropoffVagueLongitude { get; set; }

        /// <summary>
        /// Gets or Sets AppointmentDate
        /// </summary>
        [Required]
        [DataMember(Name="appointmentDate")]
        public DateTime? AppointmentDate { get; set; }

        /// <summary>
        /// Gets or Sets AppointmentTypeId
        /// </summary>
        [Required]
        [DataMember(Name="appointmentTypeId")]
        public int? AppointmentTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created")]
        public DateTime? Created { get; internal set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated")]
        public DateTime? Updated { get; internal set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Appointment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DispatcherId: ").Append(DispatcherId).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  ClinicId: ").Append(ClinicId).Append("\n");
            sb.Append("  PickupLocationVague: ").Append(PickupLocationVague).Append("\n");
            sb.Append("  DropoffLocationVague: ").Append(DropoffLocationVague).Append("\n");
            sb.Append("  AppointmentDate: ").Append(AppointmentDate).Append("\n");
            sb.Append("  AppointmentTypeId: ").Append(AppointmentTypeId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Appointment)obj);
        }

        /// <summary>
        /// Returns true if Appointment instances are equal
        /// </summary>
        /// <param name="other">Instance of Appointment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Appointment other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    DispatcherId == other.DispatcherId ||
                    DispatcherId != null &&
                    DispatcherId.Equals(other.DispatcherId)
                ) && 
                (
                    CallerId == other.CallerId ||
                    CallerId != null &&
                    CallerId.Equals(other.CallerId)
                ) && 
                (
                    ClinicId == other.ClinicId ||
                    ClinicId != null &&
                    ClinicId.Equals(other.ClinicId)
                ) && 
                (
                    PickupLocationVague == other.PickupLocationVague ||
                    PickupLocationVague != null &&
                    PickupLocationVague.Equals(other.PickupLocationVague)
                ) && 
                (
                    DropoffLocationVague == other.DropoffLocationVague ||
                    DropoffLocationVague != null &&
                    DropoffLocationVague.Equals(other.DropoffLocationVague)
                ) && 
                (
                    AppointmentDate == other.AppointmentDate ||
                    AppointmentDate != null &&
                    AppointmentDate.Equals(other.AppointmentDate)
                ) && 
                (
                    AppointmentTypeId == other.AppointmentTypeId ||
                    AppointmentTypeId != null &&
                    AppointmentTypeId.Equals(other.AppointmentTypeId)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (DispatcherId != null)
                    hashCode = hashCode * 59 + DispatcherId.GetHashCode();
                    if (CallerId != null)
                    hashCode = hashCode * 59 + CallerId.GetHashCode();
                    if (ClinicId != null)
                    hashCode = hashCode * 59 + ClinicId.GetHashCode();
                    if (PickupLocationVague != null)
                    hashCode = hashCode * 59 + PickupLocationVague.GetHashCode();
                    if (DropoffLocationVague != null)
                    hashCode = hashCode * 59 + DropoffLocationVague.GetHashCode();
                    if (AppointmentDate != null)
                    hashCode = hashCode * 59 + AppointmentDate.GetHashCode();
                    if (AppointmentTypeId != null)
                    hashCode = hashCode * 59 + AppointmentTypeId.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Appointment left, Appointment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Appointment left, Appointment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
