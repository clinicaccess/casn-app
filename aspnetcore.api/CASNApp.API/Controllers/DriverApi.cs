/*
 * CASN API
 *
 * This is a test CASN API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: katie@clinicaccess.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CASNApp.API.Attributes;
using CASNApp.API.Extensions;
using CASNApp.Core.Models;
using CASNApp.Core.Queries;
using CASNApp.Core.Commands;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Swashbuckle.AspNetCore.SwaggerGen;
using Microsoft.Extensions.Logging;

namespace CASNApp.API.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Authorize(Policy = Constants.IsDriverPolicy)]
    public class DriverApiController : Controller
    {
        private readonly Core.Entities.casn_appContext dbContext;
		private readonly ILoggerFactory loggerFactory;
		private readonly ILogger<DriverApiController> logger;
		private readonly bool twilioIsEnabled;
		private readonly string twilioAccountSID;
		private readonly string twilioAuthKey;
		private readonly string twilioPhoneNumber;

		public DriverApiController(Core.Entities.casn_appContext dbContext, IConfiguration configuration, ILoggerFactory loggerFactory)
        {
            this.dbContext = dbContext;
			this.loggerFactory = loggerFactory;
			logger = loggerFactory.CreateLogger<DriverApiController>();
			twilioIsEnabled = bool.Parse(configuration[Core.Constants.TwilioIsEnabled]);
			twilioAccountSID = configuration[Core.Constants.TwilioAccountSID];
			twilioAuthKey = configuration[Core.Constants.TwilioAuthKey];
			twilioPhoneNumber = configuration[Core.Constants.TwilioPhoneNumber];
		}

		/// <summary>
		/// applies a volunteer for a drive
		/// </summary>
		/// <remarks>Adds a volunteer drive application</remarks>
		/// <param name="body"></param>
		/// <response code="200">Success. Added applicant record.</response>
		/// <response code="400">Client Error - please check your request format &amp; try again.</response>
		/// <response code="404">Error. The driveId or volunteerId was not found.</response>
		[HttpPost]
        [Route("api/drives/apply")]
        [ValidateModelState]
        [SwaggerOperation("AddDriveApplicant")]
        public virtual IActionResult AddDriveApplicant([FromBody]Body body)
        {
            var userEmail = HttpContext.GetUserEmail();
            var volunteerQuery = new VolunteerQuery(dbContext);
            var volunteer = volunteerQuery.GetActiveDriverByEmail(userEmail, true);

            if (volunteer == null)
            {
                return Forbid();
            }

            var driveId = body.DriveId;

            if (!driveId.HasValue)
            {
                return BadRequest(body);
            }

            var drive = dbContext.Drive.Where(d => d.Id == driveId.Value && d.IsActive).SingleOrDefault();

            if (drive == null)
            {
                return NotFound(body);
            }

            bool alreadyApplied = dbContext.VolunteerDrive
                .Include(vd => vd.Drive)
                .Where(vd => vd.VolunteerId == volunteer.Id && vd.DriveId == drive.Id && vd.IsActive)
                .Any();

            if (alreadyApplied)
            {
                return Conflict(body);
            }

            var volunteerDrive = new Core.Entities.VolunteerDrive
            {
                Created = DateTime.UtcNow,
                DriveId = (int)driveId.Value,
                VolunteerId = volunteer.Id,
                IsActive = true,
            };

            dbContext.VolunteerDrive.Add(volunteerDrive);
            
            if (drive.StatusId == Drive.StatusOpen)
            {
                drive.StatusId = Drive.StatusPending;
                drive.Updated = DateTime.UtcNow;
            }

            dbContext.SaveChanges();

            var volunteerDriveDTO = new Core.Models.VolunteerDrive(volunteerDrive);

			//send Drive Applied for Drive message
			if (twilioIsEnabled)
			{
				try
				{
					//send initial text message to drivers
					var twilioCommand = new TwilioCommand(twilioAccountSID, twilioAuthKey, twilioPhoneNumber, loggerFactory.CreateLogger<TwilioCommand>(), dbContext);
					twilioCommand.SendDispatherMessage(drive, volunteer, TwilioCommand.MessageType.DriverAppliedForDrive);
				}
				catch (Exception ex)
				{
					logger.LogError(ex, $"{nameof(AddDriveApplicant)}(): Exception");
				}
			}

			return Ok(volunteerDriveDTO);

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
        }

        /// <summary>
        /// gets applied-for and approved drives for the current user
        /// </summary>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("api/driver/myDrives")]
        [ValidateModelState]
        [SwaggerOperation("GetMyDrives")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DriverDrive>), description: "Success")]
        public virtual IActionResult GetMyDrives()
        {
            var userEmail = HttpContext.GetUserEmail();
            var volunteerQuery = new VolunteerQuery(dbContext);
            var volunteer = volunteerQuery.GetActiveDriverByEmail(userEmail, true);

            if (volunteer == null)
            {
                return Forbid();
            }

            var results = dbContext.VolunteerDrive
                .AsNoTracking()
                .Include(vd => vd.Drive.Appointment.Caller)
                .Where(vd => vd.VolunteerId == volunteer.Id &&
                    vd.Drive.Appointment.AppointmentDate > DateTime.Today.ToUniversalTime())
                .Select(vd => new DriverDrive(vd))
                .ToList();

            return Ok(results);
        }
    }
}
