/*
 * CASN API
 *
 * This is a test CASN API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: katie@clinicaccess.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using CASNApp.API.Attributes;
using CASNApp.API.Extensions;
using CASNApp.Core.Commands;
using CASNApp.Core.Misc;
using CASNApp.Core.Models;
using CASNApp.Core.Queries;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Swashbuckle.AspNetCore.Annotations;

namespace CASNApp.API.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [Authorize]
    public class DriverApiController : Controller
    {
        private readonly Core.Entities.casn_appContext dbContext;
		private readonly ILoggerFactory loggerFactory;
		private readonly ILogger<DriverApiController> logger;
        private readonly IConfiguration configuration;
		private readonly bool twilioIsEnabled;
        private readonly bool badgesAreEnabled;

        public DriverApiController(Core.Entities.casn_appContext dbContext, IConfiguration configuration, ILoggerFactory loggerFactory)
        {
            this.dbContext = dbContext;
			this.loggerFactory = loggerFactory;
			logger = loggerFactory.CreateLogger<DriverApiController>();
            this.configuration = configuration;
			twilioIsEnabled = bool.Parse(configuration[Core.Constants.TwilioIsEnabled]);
            badgesAreEnabled = bool.Parse(configuration[Core.Constants.BadgesAreEnabled]);
        }

        /// <summary>
        /// applies a volunteer for a drive
        /// </summary>
        /// <remarks>Adds a volunteer drive application</remarks>
        /// <param name="body"></param>
        /// <response code="200">Success. Added applicant record.</response>
        /// <response code="400">Client Error - please check your request format &amp; try again.</response>
        /// <response code="404">Error. The driveId or volunteerId was not found.</response>
        [HttpPost]
        [Route("api/drives/apply")]
        [ValidateModelState]
        [SwaggerOperation("AddDriveApplicant")]
        public virtual IActionResult AddDriveApplicant([FromBody]Body body)
        {
            var userEmail = HttpContext.GetUserEmail();
            var volunteerQuery = new VolunteerQuery(dbContext);
            var volunteer = volunteerQuery.GetActiveDriverByEmail(userEmail, true);

            if (volunteer == null)
            {
                return Forbid();
            }

            var driveId = body.DriveId;

            if (!driveId.HasValue)
            {
                return BadRequest(body);
            }

            var drive = dbContext.Drive.Where(d => d.Id == driveId.Value && d.IsActive).SingleOrDefault();

            if (drive == null)
            {
                return NotFound(body);
            }

            bool alreadyApplied = dbContext.VolunteerDriveLog
                .Include(vd => vd.Drive)
                .Where(vd => vd.VolunteerId == volunteer.Id && vd.DriveId == drive.Id && vd.IsActive)
                .Any();

            if (alreadyApplied)
            {
                return Conflict(body);
            }

            var volunteerDriveLog = new Core.Entities.VolunteerDriveLog
            {
                Created = DateTime.UtcNow,
                DriveId = (int)driveId.Value,
                VolunteerId = volunteer.Id,
                IsActive = true,
                DriveLogStatusId = Core.Entities.DriveLogStatus.APPLIED,
            };

            dbContext.VolunteerDriveLog.Add(volunteerDriveLog);
            
            if (drive.StatusId == Drive.StatusOpen)
            {
                drive.StatusId = Drive.StatusPending;
                drive.Updated = DateTime.UtcNow;
            }

            dbContext.SaveChanges();

            var volunteerDriveDTO = new Core.Models.VolunteerDrive(volunteerDriveLog);

			//send Drive Applied for Drive message
			if (twilioIsEnabled)
			{
				try
				{
					//send initial text message to drivers
					var twilioCommand = new TwilioCommand(loggerFactory.CreateLogger<TwilioCommand>(), dbContext, configuration);
					twilioCommand.SendDispatcherMessage(drive, volunteer, TwilioCommand.MessageType.DriverAppliedForDrive);
				}
				catch (Exception ex)
				{
					logger.LogError(ex, $"{nameof(AddDriveApplicant)}(): Exception");
				}
			}

            // check and award badges
            if (badgesAreEnabled)
            {
                try
                {
                    var badgeCommand = new BadgeCommand(dbContext, loggerFactory.CreateLogger<BadgeCommand>());
                    var badgeQuery = new BadgeQuery(dbContext);
                    var relevantUnearnedBadges = badgeQuery.GetRelevantUnearnedBadgesForVolunteerIdAsync(volunteer.Id, BadgeTriggerType.AppliedForDrive, false).Result;

                    foreach (var badge in relevantUnearnedBadges)
                    {
                        var badgeAwarded = badgeCommand.CheckAndAwardBadgeAsync(badge, volunteer, volunteerDriveLog).Result;

                        if (badgeAwarded)
                        {
                            dbContext.SaveChanges();

                            //text the volunteer about the badge they just earned
                            if (twilioIsEnabled)
                            {
                                try
                                {
                                    //send initial text message to drivers
                                    var twilioCommand = new TwilioCommand(loggerFactory.CreateLogger<TwilioCommand>(), dbContext, configuration);
                                    twilioCommand.SendBadgeMessage(volunteer, badge);
                                    dbContext.SaveChanges();
                                }
                                catch (Exception ex)
                                {
                                    logger.LogError(ex, $"{nameof(AddDriveApplicant)}(): Exception");
                                }
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    logger.LogError($"{nameof(AddDriveApplicant)}(): Exception: {ex}");
                }
            }

            return Ok(volunteerDriveDTO);
        }

        /// <summary>
        /// retracts a volunteer's application for a drive
        /// </summary>
        /// <remarks>Retracts a volunteer drive application</remarks>
        /// <param name="body"></param>
        /// <response code="200">Success. Retracted applicant record.</response>
        /// <response code="400">Client Error - please check your request format &amp; try again.</response>
        /// <response code="404">Error. The driveId or volunteerId was not found.</response>
        [HttpPost]
        [Route("api/drives/unapply")]
        [ValidateModelState]
        [SwaggerOperation(nameof(RetractDriveApplicant))]
        public virtual async Task<IActionResult> RetractDriveApplicant([FromBody]Body body)
        {
            var userEmail = HttpContext.GetUserEmail();
            var volunteerQuery = new VolunteerQuery(dbContext);
            var volunteer = volunteerQuery.GetActiveDriverByEmail(userEmail, true);

            if (volunteer == null)
            {
                return Forbid();
            }

            var driveId = body.DriveId;

            if (!driveId.HasValue)
            {
                return BadRequest(body);
            }

            var drive = await dbContext.Drive
                .Where(d => d.Id == driveId.Value && d.IsActive)
                .SingleOrDefaultAsync();

            if (drive == null)
            {
                return NotFound(body);
            }

            var volunteerDriveLogsForThisDrive = await dbContext.VolunteerDriveLog
                .Where(vd => vd.DriveId == drive.Id &&
                    vd.IsActive &&
                    (vd.DriveLogStatusId == Core.Entities.DriveLogStatus.APPLIED ||
                    vd.DriveLogStatusId == Core.Entities.DriveLogStatus.APPROVED))
                .ToListAsync();

            var volunteerDriveLogsForThisUser = volunteerDriveLogsForThisDrive
                .Where(vd => vd.VolunteerId == volunteer.Id &&
                    vd.DriveLogStatusId == Core.Entities.DriveLogStatus.APPLIED)
                .OrderBy(vd => vd.Id)
                .ToList();

            if (!volunteerDriveLogsForThisUser.Any())
            {
                // Can't retract your application if you haven't applied
                return Conflict(body);
            }

            foreach (var volunteerDriveLog in volunteerDriveLogsForThisUser)
            {
                volunteerDriveLog.DriveLogStatusId = Core.Entities.DriveLogStatus.CANCELED;
                volunteerDriveLog.Canceled = DateTime.UtcNow;
                volunteerDriveLog.IsActive = false;
            }

            var volunteerDriveLogsForOtherUsers = volunteerDriveLogsForThisDrive
                .Where(vd => !volunteerDriveLogsForThisUser.Contains(vd))
                .ToList();

            if (drive.StatusId == Drive.StatusPending &&
                !volunteerDriveLogsForOtherUsers.Any())
            {
                drive.StatusId = Drive.StatusOpen;
            }

            await dbContext.SaveChangesAsync();

            var volunteerDriveDTO = new VolunteerDrive(volunteerDriveLogsForThisDrive.First());

            if (badgesAreEnabled)
            {
                try
                {
                    foreach (var volunteerDriveLog in volunteerDriveLogsForThisUser)
                    {
                        logger.LogInformation($"Checking badges for VolunteerDriveLog #{volunteerDriveLog.Id}");

                        var volunteerBadges = await dbContext.VolunteerBadge
                            .Where(vb => vb.VolunteerDriveLogId == volunteerDriveLog.Id)
                            .ToListAsync();

                        foreach (var volunteerBadge in volunteerBadges)
                        {
                            logger.LogInformation($"Removing VolunteerBadge #{volunteerBadge.Id} for badge #{volunteerBadge.BadgeId}");
                            dbContext.VolunteerBadge.Remove(volunteerBadge);
                        }
                    }

                    await dbContext.SaveChangesAsync();
                }
                catch (Exception ex)
                {
                    logger.LogError($"{nameof(AddDriveApplicant)}(): Exception: {ex}");
                }
            }

            return Ok();
        }

        /// <summary>
        /// gets approved drives for the current user
        /// </summary>
        /// <remarks>Get all appointments within a date range for which the current user is approved.</remarks>
        /// <param name="startDate">pass a startDate by which to filter</param>
        /// <param name="endDate">pass an endDate by which to filter</param>
        /// <response code="200">all appointments in date range</response>
        /// <response code="400">Client Error - please check your request format &amp; try again.</response>
        /// <response code="404">Error - Not Found</response>
        [HttpGet]
        [Route("api/driver/myDrives")]
        [ValidateModelState]
        [SwaggerOperation("GetMyDrives")]
        [SwaggerResponse(statusCode: 200, type: typeof(AllAppointments), description: "success")]
        public virtual async Task<IActionResult> GetMyDrives([FromQuery] [MinLength(4)]string startDate, [FromQuery] [MinLength(4)]string endDate)
        {
            var userEmail = HttpContext.GetUserEmail();
            var volunteerQuery = new VolunteerQuery(dbContext);
            var volunteer = volunteerQuery.GetActiveDriverByEmail(userEmail, true);

            if (volunteer == null)
            {
                return Forbid();
            }

            var start = DateTime.Parse(startDate, styles: System.Globalization.DateTimeStyles.AssumeLocal);
            var end = DateTime.Parse(endDate, styles: System.Globalization.DateTimeStyles.AssumeLocal);

            var appointmentEntities = await dbContext.Appointment
                .AsNoTracking()
                .Include(a => a.Drives)
                .Include(a => a.Caller)
                .Where(a => a.AppointmentDate >= start &&
                            a.AppointmentDate <= end &&
                            a.IsActive &&
                            a.CallerId.HasValue)
                .ToListAsync();

            var appointmentDTOs = new List<AppointmentDTO>();

            foreach (var a in appointmentEntities)
            {
                var driveTo = a.Drives.FirstOrDefault(d => d.IsActive &&
                    d.Direction == Drive.DirectionToServiceProvider &&
                    d.DriverId.HasValue &&
                    d.DriverId.Value == volunteer.Id);

                var driveFrom = a.Drives.FirstOrDefault(d => d.IsActive &&
                    d.Direction == Drive.DirectionFromServiceProvider &&
                    d.DriverId.HasValue &&
                    d.DriverId.Value == volunteer.Id);

                if (driveTo == null && driveFrom == null)
                {
                    continue;
                }

                var apptDto = new AppointmentDTO
                {
                    Caller = new Caller(a.Caller),
                    Appointment = new Appointment(a),
                    DriveTo = driveTo == null ? null : new Drive(driveTo),
                    DriveFrom = driveFrom == null ? null : new Drive(driveFrom)
                };

                if (!volunteer.IsDispatcher)
                {
                    apptDto.Redact(volunteer);
                }

                appointmentDTOs.Add(apptDto);
            }

            var result = new AllAppointments(appointmentDTOs);

            return new ObjectResult(result);
        }
    }
}
