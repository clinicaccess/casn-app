/*
 * CASN API
 *
 * This is a test CASN API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: katie@clinicaccess.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CASNApp.API.Attributes;
using CASNApp.API.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace CASNApp.API.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class DriverApiController : Controller
    {
        private readonly Entities.casn_appContext dbContext;

        public DriverApiController(Entities.casn_appContext dbContext)
        {
            this.dbContext = dbContext;
        }

        /// <summary>
        /// applies a volunteer for a drive
        /// </summary>
        /// <remarks>Adds a volunteer drive application</remarks>
        /// <param name="body"></param>
        /// <response code="200">Success. Added applicant record.</response>
        /// <response code="400">Client Error - please check your request format &amp; try again.</response>
        /// <response code="404">Error. The driveId or volunteerId was not found.</response>
        [HttpPost]
        [Route("api/drives/apply")]
        [ValidateModelState]
        [SwaggerOperation("AddDriveApplicant")]
        public virtual IActionResult AddDriveApplicant([FromBody]Body body)
        {
            var driveId = body.DriveId;

            if (!driveId.HasValue)
            {
                return BadRequest(body);
            }

            var drive = dbContext.Drive.Where(d => d.Id == driveId.Value && d.IsActive).SingleOrDefault();

            if (drive == null)
            {
                return NotFound(body);
            }

            // BEGIN: pick a random driver who has not already applied for the specified drive
            var drivers = dbContext.Volunteer.AsNoTracking().Where(v => v.IsDriver && v.IsActive).ToList();
            var random = new Random();

            Entities.Volunteer driver = null;

            for (int tries = 0; tries < drivers.Count; tries++)
            {
                var randomDriver = drivers[random.Next(drivers.Count)];

                if (!dbContext.VolunteerDrive.Any(vd => vd.VolunteerId == randomDriver.Id && vd.DriveId == driveId.Value && vd.IsActive))
                {
                    driver = randomDriver;
                    break;
                }
            }
            // END

            var volunteerDrive = new Entities.VolunteerDrive
            {
                Created = DateTime.UtcNow,
                DriveId = (uint)driveId.Value,
                VolunteerId = driver.Id,
                IsActive = true,
            };

            dbContext.VolunteerDrive.Add(volunteerDrive);
            
            if (drive.Status == Drive.StatusOpen)
            {
                drive.Status = Drive.StatusPending;
                drive.Updated = DateTime.UtcNow;
            }

            dbContext.SaveChanges();

            var volunteerDriveDTO = new Models.VolunteerDrive(volunteerDrive);

            return Ok(volunteerDriveDTO);

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
        }

        /// <summary>
        /// gets applied-for and approved drives for the current user
        /// </summary>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("api/driver/myDrives")]
        [ValidateModelState]
        [SwaggerOperation("GetMyDrives")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DriverDrive>), description: "Success")]
        public virtual IActionResult GetMyDrives()
        {
            // BEGIN: pick quasi-random driver
            uint driverId;
            var random = new Random();
            var drivers = dbContext.Volunteer
                .AsNoTracking()
                .Include(v => v.VolunteerDrives)
                .ThenInclude(vd => vd.Drive)
                .ThenInclude(d => d.Appointment)
                .Where(v => v.IsDriver && v.IsActive && v.VolunteerDrives.Count > 0)
                .OrderBy(v => v.Id)
                .ToList();
            
            if (drivers.Count == 0)
            {
                return Ok(new List<DriverDrive>());
            }
            else
            {
                int index = random.Next(0, drivers.Count);
                driverId = drivers[index].Id;
            }
            // END

            var results = dbContext.VolunteerDrive
                .AsNoTracking()
                .Include(vd => vd.Drive.Appointment.Patient)
                .Where(vd => vd.VolunteerId == driverId &&
                    vd.Drive.Appointment.AppointmentDate > DateTime.Today.ToUniversalTime())
                .Select(vd => new DriverDrive(vd))
                .ToList();

            return Ok(results);
        }
    }
}
