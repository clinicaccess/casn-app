/**
 * CASN API
 * This is a test CASN API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: katie@clinicaccess.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AllAppointments } from '../model/allAppointments.model';
import { AppointmentDTO } from '../model/appointmentDTO.model';
import { Body1 } from '../model/body1.model';
import { DeleteSuccessMessage } from '../model/deleteSuccessMessage.model';
import { Patient } from '../model/patient.model';
import { VolunteerDrive } from '../model/volunteerDrive.model';


import { Configuration }                                     from '../configuration';


export interface DispatcherServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * adds a new appointment
    * Adds appointment (and drives) to the system
    * @param appointmentDTO appointmentData to add
    */
    addAppointment(appointmentDTO?: AppointmentDTO, extraHttpRequestParams?: any): Observable<AppointmentDTO>;

    /**
    * approves a volunteer for a drive
    * Adds driverId to a drive
    * @param body1 
    */
    addDriver(body1?: Body1, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * adds a patient
    * Adds patient to the system
    * @param patient patientData to add
    */
    addPatient(patient?: Patient, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * 
    * 
    * @param appointmentID pass an appointmentIdentifier
    */
    dispatcherAppointmentsAppointmentIDDelete(appointmentID: string, extraHttpRequestParams?: any): Observable<DeleteSuccessMessage>;

    /**
    * gets appointments with dispatcher-level details
    * Get all appointments within a default date range (possibly adjustable w/ query params). Appointments include details, e.g. exact location, available only to dispatchers. 
    * @param startDate pass a startDate by which to filter
    * @param endDate pass an endDate by which to filter
    */
    getAllAppointmentsForDispatcher(startDate?: string, endDate?: string, extraHttpRequestParams?: any): Observable<AllAppointments>;

    /**
    * gets appointment by appointmentID
    * Search for existing appointment by appointmentIdentifier, return dispatcher-level details 
    * @param appointmentID pass an appointmentIdentifier
    */
    getAppointmentForDispatcherByID(appointmentID: string, extraHttpRequestParams?: any): Observable<AppointmentDTO>;

    /**
    * gets patient by patientIdentifier
    * Search for existing patients by the dispatcher created patientIdentifier (patient ID) 
    * @param patientIdentifier pass a search string for looking up patientIdentifier
    */
    getPatientByPatientIdentifier(patientIdentifier: string, extraHttpRequestParams?: any): Observable<Patient>;

    /**
    * get list of applicants for a drive
    * 
    * @param driveId id of drive
    */
    getVolunteerDrives(driveId: number, extraHttpRequestParams?: any): Observable<Array<VolunteerDrive>>;

    /**
    * updates an existing appointment
    * Updates appointment (and corresponding drive) information
    * @param appointmentID pass an appointmentIdentifier
    * @param appointmentDTO appointmentData with updated fields
    */
    updateAppointment(appointmentID: string, appointmentDTO: AppointmentDTO, extraHttpRequestParams?: any): Observable<AppointmentDTO>;

}
